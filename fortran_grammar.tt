grammar Fortran

#
  rule start
    main_program
  end
#

  rule add_op
    # R710
    plus / minus
  end

  rule add_operand
    # R706
    # LEFT-RECURSIVE RULE IMPLIED BY STANDARD:
    # ( add_operand mult_op)? mult_operand
    mult_operand ( mult_op add_operand )? <Verbatim>
  end

  rule alphanumeric_character
    # R302
    letter / digit / underscore
  end

  rule character
    # R301
    alphanumeric_character / special_character
  end

  rule comma
    "," <Verbatim>
  end

  rule concat_op
    # R712
    "//" <Verbatim>
  end

  rule constant
    # R305 -- INCOMPLETE!
    literal_constant
  end

  rule defined_binary_op
    # R724
    dot letter letter+ dot <Verbatim>
  end

  rule defined_unary_op
    # R704
    dot letter letter+ dot <Verbatim>
  end

  rule digit
    # 3.1.2
    [0-9]
  end

  rule digit_string
    # R402
    digit+ <Verbatim>
  end

  rule dot
    "." <Verbatim>
  end

  rule _end
    "end" <Verbatim>
  end

  rule end_program_stmt
    # R1103
    _end program? name? newline? <End_Program_Stmt>
  end

  rule equiv_op
    # R722
    ".eqv." <Verbatim> / ".neqv." <Verbatim>
  end

  rule equiv_operand
    # R715
    not_op? level_4_expr <Verbatim>
  end

  rule execution_part
    execution_stmt+ <Execution_Part>
  end

  rule execution_stmt
    print_stmt
  end

  rule expr
    # R723
    # LEFT-RECURSIVE RULE IMPLIED BY STANDARD:
    # ( expr defined_binary_op )? level_5_expr
    level_5_expr ( defined_binary_op expr )? <Verbatim>
  end

  rule format
    # R913 -- INCOMPLETE!
    star
  end

  rule int_literal_constant
    # R404
    digit_string ( underscore kind_param )? <Verbatim>
  end

  rule internal_subprogram_part
    ""
  end

  rule kind_param
    # R405 -- INCOMPLETE!
    digit_string
  end

  rule letter
    # 3.1.1
    [a-z]
  end

  rule level_1_expr
    # R703
    defined_unary_op? primary <Verbatim>
  end

  rule level_2_expr
    # R707
    # LEFT-RECURSIVE RULE IMPLIED BY STANDARD:
    # ( level_2_expr? add_op )? add_operand
    add_op? add_operand level_2_expr? <Verbatim>
  end

  rule level_3_expr
    # R711
    # LEFT-RECURSIVE RULE IMPLIED BY STANDARD:
    # ( level_3_expr concat_op )? level_2_expr
    level_2_expr ( concat_op level_3_expr )? <Verbatim>
  end

  rule level_4_expr
    # R713
    # LEFT-RECURSIVE RULE IMPLIED BY STANDARD:
    # ( level_3_expr rel_op )? level_3_expr
    level_3_expr ( rel_op level_3_expr )? <Verbatim>
  end
  
  rule level_5_expr
    # R718
    # LEFT-RECURSIVE RULE IMPLIED BY STANDARD:
    # ( level_5_expr equiv_op)? equiv_operand
    equiv_operand ( equiv_op level_5_expr )? <Verbatim>
  end

  rule literal_constant
    # R306 -- INCOMPLETE!
    int_literal_constant
  end

  rule main_program
    # R1101
    program_stmt? execution_part? end_program_stmt <Main_Program>
  end

  rule minus
    "-" <Verbatim>
  end

  rule mult_op
    # R709
    star / slash
  end

  rule mult_operand
    # R705
    level_1_expr ( power_op mult_operand )? <Verbatim>
  end

  rule name
    # R304
    letter alphanumeric_character* <Name>
  end

  rule newline
    "\n" <Verbatim>
  end

  rule not_op
    # R719
    ".not." <Verbatim>
  end

  rule output_item
    # R915 -- INCOMPLETE!
    expr
  end

  rule output_item_list
    comma output_item+ <Verbatim>
  end

  rule plus
    "+" <Verbatim>
  end

  rule power_op
    # R708
    "**" <Verbatim>
  end

  rule primary
    # R701 -- INCOMPLETE!
    constant
  end

  rule print
    "print" <Verbatim>
  end

  rule print_stmt
    # R911
    print format output_item_list newline <Print_Stmt> / print format newline <Print_Stmt>
  end

  rule program
    "program" <Verbatim>
  end

  rule program_stmt
    # R1102
    program name newline <Program_Stmt>
  end

  rule rel_op_eq
    ".eq." <Verbatim> / "==" <Verbatim>
  end

  rule rel_op_ge
    ".ge." <Verbatim> / ">=" <Verbatim>
  end

  rule rel_op_gt
    ".gt." <Verbatim> / ">" <Verbatim>
  end

  rule rel_op_le
    ".le." <Verbatim> / "<=" <Verbatim>
  end

  rule rel_op_lt
    ".lt." <Verbatim> / "<" <Verbatim>
  end

  rule rel_op_ne
    ".ne." <Verbatim> / "/=" <Verbatim>
  end

  rule rel_op
    # R714
    rel_op_eq / rel_op_ne / rel_op_lt / rel_op_le / rel_op_gt / rel_op_ge
  end

  rule sign
    # R406
    plus / minus
  end

  rule signed_digit_string
    # R401
    sign? digit_string <Verbatim>
  end

  rule signed_int_literal_constant
    # R403
    sign? int_literal_constant <Verbatim>
  end

  rule slash
    "/" <Verbatim>
  end

  rule special_character
    # 3.1.4
    [ =+-*/();.':!"%&;<>?$]
  end

  rule specification_part
    ""
  end

  rule star
    "*" <Verbatim>
  end

  rule underscore
    # R303
    '_'
  end

end
