#!/bin/bash

fail()  { test -n "$1" && echo $1; exit 1; }
usage() { fail "Usage: $b <socket> <pidfile> [runtime]"; }

# Names of things

p=$(readlink $0) || p=$0
d=$(dirname  $p)
b=$(basename $p)

tool=$(echo $b | sed 's/s$//')

cruby="ruby"
jruby="java -Djruby.compile.invokedynamic=true -Djruby.compile.mode=OFF -jar $d/jruby.jar"

engine="$cruby"

# Command-line arguments

socket=$1
pidfile=$2
runtime=$3

# Sanity checks

test -z "$socket" -o -z "$pidfile" && usage
test -e $socket && fail "socket $socket exists, aborting..."
if [ -e $pidfile ]; then test -w $pidfile; else touch $pidfile; fi
test $? -eq 0 || fail "pidfile $pidfile not writable, aborting..."

# Server startup

$engine $d/$b.rb $socket &
server_pid=$!
echo $server_pid > $pidfile

# Block until server is ready

echo -n "$tool server starting up: "
while [ ! -S $socket ]
do
  ps $server_pid >/dev/null || fail "Failed to start server"
  sleep 1
done
echo "ok"

# Note that the server process will automatically shut down shortly after its
# parent does. This is ideal for use with make, where make starts the server,
# performs some traslations via the client, then exits: The server will follow
# suit and exit. For interactive use, the 'runtime' command-line argument keeps
# the server alive for the requestd number of seconds.

test -n "$runtime" && sleep $runtime
