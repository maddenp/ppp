# Autogenerated from a Treetop grammar. Edits may be lost.


module Normalizer
  include Treetop::Runtime

  def root
    @root ||= :text
  end

  def _nt_text
    start_index = index
    if node_cache[:text].has_key?(index)
      cached = node_cache[:text][index]
      if cached
        node_cache[:text][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_sms
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        r3 = _nt_omp
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          r4 = _nt_directive
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r1 = r4
          else
            r5 = _nt_comment
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r1 = r5
            else
              r6 = _nt_quoted
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r1 = r6
              else
                r7 = _nt_unquoted
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r1 = r7
                else
                  @index = i1
                  r1 = nil
                end
              end
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(Text,input, i0...index, s0)

    node_cache[:text][start_index] = r0

    r0
  end

  def _nt_omp
    start_index = index
    if node_cache[:omp].has_key?(index)
      cached = node_cache[:omp][index]
      if cached
        node_cache[:omp][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?(@regexps['__ir__'+(gr = "\\A@[$]omp[^'\"\n]*")] ||= Regexp.new(gr, Regexp::IGNORECASE), :regexp, index))
      r0 = instantiate_node(OMP,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"@[$]omp[^\\\'\\"\\n]*"')
      r0 = nil
    end

    node_cache[:omp][start_index] = r0

    r0
  end

  def _nt_sms
    start_index = index
    if node_cache[:sms].has_key?(index)
      cached = node_cache[:sms][index]
      if cached
        node_cache[:sms][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?(@regexps['__ir__'+(gr = "\\A@sms[$][^'\"\n]*")] ||= Regexp.new(gr, Regexp::IGNORECASE), :regexp, index))
      r0 = instantiate_node(SMS,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"@sms[$][^\\\'\\"\\n]*"')
      r0 = nil
    end

    node_cache[:sms][start_index] = r0

    r0
  end

end

class NormalizerParser < Treetop::Runtime::CompiledParser
  include Normalizer
end

