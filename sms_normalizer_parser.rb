# Autogenerated from a Treetop grammar. Edits may be lost.


module Normalizer
  include Treetop::Runtime

  def root
    @root ||= :text
  end

  def _nt_text
    start_index = index
    if node_cache[:text].has_key?(index)
      cached = node_cache[:text][index]
      if cached
        node_cache[:text][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_sms
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        r3 = _nt_omp
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          r4 = _nt_directive
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r1 = r4
          else
            r5 = _nt_comment
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r1 = r5
            else
              r6 = _nt_quoted
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r1 = r6
              else
                r7 = _nt_unquoted
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r1 = r7
                else
                  @index = i1
                  r1 = nil
                end
              end
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(Text,input, i0...index, s0)

    node_cache[:text][start_index] = r0

    r0
  end

  module Omp0
  end

  def _nt_omp
    start_index = index
    if node_cache[:omp].has_key?(index)
      cached = node_cache[:omp][index]
      if cached
        node_cache[:omp][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("@$omp ", false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure("@$omp ")
      r1 = nil
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?("end ", false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure("end ")
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        if (match_len = has_terminal?("parallel do", false, index))
          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure("parallel do")
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[^\\\'\\"\\n]'] ||= Regexp.new(gr), :regexp, index)
              r6 = true
              @index += 1
            else
              terminal_parse_failure('[^\\\'\\"\\n]')
              r6 = nil
            end
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(OMP,input, i0...index, s0)
      r0.extend(Omp0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:omp][start_index] = r0

    r0
  end

  module Sms0
  end

  def _nt_sms
    start_index = index
    if node_cache[:sms].has_key?(index)
      cached = node_cache[:sms][index]
      if cached
        node_cache[:sms][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("@", false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure("@")
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?(@regexps[gr = '\A[sS]'] ||= Regexp.new(gr), :regexp, index)
        r2 = true
        @index += 1
      else
        terminal_parse_failure('[sS]')
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?(@regexps[gr = '\A[mM]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[mM]')
          r3 = nil
        end
        s0 << r3
        if r3
          if has_terminal?(@regexps[gr = '\A[sS]'] ||= Regexp.new(gr), :regexp, index)
            r4 = true
            @index += 1
          else
            terminal_parse_failure('[sS]')
            r4 = nil
          end
          s0 << r4
          if r4
            if (match_len = has_terminal?("$", false, index))
              r5 = true
              @index += match_len
            else
              terminal_parse_failure("$")
              r5 = nil
            end
            s0 << r5
            if r5
              s6, i6 = [], index
              loop do
                if has_terminal?(@regexps[gr = '\A[^\\\'\\"\\n]'] ||= Regexp.new(gr), :regexp, index)
                  r7 = true
                  @index += 1
                else
                  terminal_parse_failure('[^\\\'\\"\\n]')
                  r7 = nil
                end
                if r7
                  s6 << r7
                else
                  break
                end
              end
              r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
              s0 << r6
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SMS,input, i0...index, s0)
      r0.extend(Sms0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:sms][start_index] = r0

    r0
  end

end

class NormalizerParser < Treetop::Runtime::CompiledParser
  include Normalizer
end

