#!/usr/bin/env jruby

$: << File.dirname(File.expand_path($0))

server_mode=true
threads=1

require "common"
require "fileutils"
require "thread"

def docmd(cmd)
  out=IO.popen(cmd+" 2>&1") { |x| x.readlines.reduce("") { |s,e| s+=e } }
  [($?.exitstatus==0)?(true):(false),out]
end

def exe(bin)
  cmd=bin
  stat,out=docmd(cmd)
  fail(out,cmd) unless stat
  out
end

def fail(msg=nil,cmd=nil)
  puts
  puts msg if msg
  puts "Command was: #{cmd}" if cmd
  puts "FAIL"
  exit(1)
end

def run(q,socket)
  test(q.deq,socket) until q.empty?
end

def test(t,socket)
  print "."
  exe("make -C #{t} clean")
  x=(socket)?(" SOCKET=#{socket} "):(" ")
  exe("make -C #{t}#{x}exe")
  e="./a.out"
  stdout=((File.exist?(File.join(t,e)))?(exe("cd #{t} && #{e}")):(""))
  f=File.join(t,"control")
  if File.exist?(f)
    control=File.open(f,"rb").read
    unless stdout==control
      msg="#{t} output expected:\n--begin--\n"
      msg+=control
      msg+="-- end --\n#{t} output actual:\n--begin--\n"
      msg+=stdout
      msg+="-- end --"
      fail(msg)
    end
  end
  exe("make -C #{t} clean")
end

if server_mode
  socket=File.expand_path("./socket.#{$$}")
  clear_socket(socket)
  server=Thread.new { server(socket) }
  sleep 1 until File.exist?(socket)
else
  socket=nil
end

fail("Need at least one thread to run tests") unless threads>0
exe("make")
tdir="tests"
tests=(ARGV[0])?(["#{tdir}/#{ARGV[0]}"]):(Dir.glob("#{tdir}/t*").sort)
q=Queue.new
tests.each { |e| q.enq(e) }
(1..threads).reduce([]) { |m,e| m << Thread.new { run(q,socket) } }.each { |e| e.join }
puts "\nOK (#{tests.size} tests)"

server.raise(Interrupt) if server_mode

# paul.a.madden@noaa.gov
