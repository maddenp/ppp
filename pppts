#!/usr/bin/env ruby

threaded=true

require "fileutils"

def docmd(cmd)
  out=IO.popen(cmd+" 2>&1") { |x| x.readlines.reduce("") { |s,e| s+=e } }
  [($?.exitstatus==0)?(true):(false),out]
end

def exe(bin)
  cmd=bin
  stat,out=docmd(cmd)
  fail(out,cmd) unless stat
  out
end

def fail(msg=nil,cmd=nil)
  puts
  puts "Command: #{cmd}" if cmd
  puts msg if msg
  puts "FAIL"
  exit(1)
end

def test(t)
  print "."
  exe("make -C #{t} clean")
  exe("make -C #{t} exe")
  e="./a.out"
  stdout=((File.exists?(File.join(t,e)))?(exe("cd #{t} && #{e}")):(""))
  f=File.join(t,"control")
  if File.exists?(f)
    control=File.open(f,"rb").read
    unless stdout==control
      msg="#{t} output expected:\n--begin--\n"
      msg+=control
      msg+="-- end --\n#{t} output actual:\n--begin--\n"
      msg+=stdout
      msg+="-- end --"
      fail msg
    end
  end
  exe("make -C #{t} clean")
end

tdir="tests"
tests=(ARGV[0])?(["#{tdir}/#{ARGV[0]}"]):(Dir.glob("#{tdir}/t*").sort)
exe("make")
if threaded
  threads=[]
  tests.each { |t| threads.push(Thread.new { test(t) }) }
  threads.each { |t| t.join }
else
  tests.each { |t| test(t) }
end

puts "\nOK (#{tests.size} tests)"

# paul.a.madden@noaa.gov
