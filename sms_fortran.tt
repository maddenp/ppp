grammar Fortran

  rule declaration_construct
    # F90:R207

    derived_type_def /
    interface_block /
    type_declaration_stmt /
    specification_stmt /
    parameter_stmt /
    format_stmt /
    entry_stmt /
    stmt_function_stmt !{ |e| sp_is_array?(e[0]) } <Declaration_Construct_Stmt_Function_Stmt> /
    f2c_directive /
    sms_declarative
  end

  rule directive
    # Note: Any "comment" not stripped out during normalization is a directive.
    # These are non-SMS directives.

    !( sms_sentinel / f2c_sentinel / omp_parallel_do_begin / omp_parallel_do_end ) t_bang character+ t_newline <Directive>
  end

  rule executable_construct
    # F90:R215

    executable_construct_action_stmt /
    case_construct /
    do_construct &{ |e| sp_do_construct(e[0]) } <Do_Construct> /
    if_construct /
    where_construct /
    omp_parallel_do /
    f2c_directive /
    sms_executable /
    directive
  end

  rule f2c_continuation
    f2c_sentinel f2c_continuation_char f2c_generic t_newline <F2C_Continuation>
  end

  rule f2c_continuation_char
    ">" <T>
  end

  rule f2c_continuations
    f2c_continuation* <F2C_Continuations>
  end

  rule f2c_directive
    f2c_initial f2c_continuations? <F2C_Directive>
  end

  rule f2c_generic
    "[^\n]+"ir <T>
  end

  rule f2c_initial
    f2c_sentinel f2c_generic t_newline <F2C_Initial>
  end
    
  rule f2c_sentinel
    "!acc$" <T>
  end

  rule omp_clauses
    "[^&\n]*"ir <T>
  end

  rule omp_parallel_do_begin
    omp_sentinel omp_t_parallel omp_t_do omp_clauses t_newline <OMP_Parallel_Do_Begin>
  end

  rule omp_parallel_do_end
    omp_sentinel omp_t_end omp_t_parallel omp_t_do t_newline <OMP_Parallel_Do_End>
  end

  rule omp_parallel_do
    omp_parallel_do_begin omp_parallel_do_body omp_parallel_do_end? <OMP_Parallel_Do>
  end

  rule omp_parallel_do_body
    omp_parallel_do_body_allowed+ <OMP_Parallel_Do_Body>
  end

  rule omp_parallel_do_body_allowed
    do_construct &{ |e| sp_do_construct(e[0]) } <Do_Construct> /
    directive
  end

  rule omp_sentinel
    "!$omp " <T>
  end

  rule omp_t_do
    "do *"ir <T>
  end

  rule omp_t_end
    "end *"ir <T>
  end

  rule omp_t_parallel
    "parallel *"ir <T>
  end

  rule sms_barrier
    sms_sentinel sms_t_barrier sms_comment? t_newline &{ |e| sp_sms_barrier } <SMS_Barrier>
  end

  rule sms_comm_rank
    sms_sentinel sms_t_comm_rank t_paren_l scalar_int_variable t_paren_r sms_comment? t_newline &{ |e| sp_sms_comm_rank } <SMS_Comm_Rank>
  end

  rule sms_comm_size
    sms_sentinel sms_t_comm_size t_paren_l scalar_int_variable t_paren_r sms_comment? t_newline &{ |e| sp_sms_comm_size } <SMS_Comm_Size>
  end

  rule sms_comment
    "![^\n]*"ir <SMS_Comment>
  end

  rule sms_compare_var
    sms_sentinel sms_t_compare_var t_paren_l variable t_comma sms_string t_paren_r sms_comment? t_newline &{ |e| sp_sms_compare_var } <SMS_Compare_Var>
  end

  rule sms_create_decomp
    sms_sentinel sms_t_create_decomp t_paren_l sms_decomp_name t_comma sms_create_decomp_global t_comma sms_create_decomp_halo sms_create_decomp_regionsize t_paren_r sms_comment? t_newline &{ |e| sp_sms_create_decomp } <SMS_Create_Decomp>
  end

  rule sms_create_decomp_global
    t_lt sms_varlist3d t_gt <SMS_Create_Decomp_Global>
  end

  rule sms_create_decomp_halo
    t_lt sms_varlist3d t_gt <SMS_Create_Decomp_Halo>
  end

  rule sms_create_decomp_regionsize
    t_colon sms_t_regionsize t_equal variable <SMS_Create_Decomp_Regionsize>
  end

  rule sms_declarative
    sms_declare_decomp /
    sms_distribute
  end

  rule sms_declare_decomp
    sms_sentinel sms_t_declare_decomp t_paren_l sms_decomp_name t_comma scalar_int_literal_constant sms_declare_decomp_unstructured_option? t_paren_r sms_comment? t_newline <SMS_Declare_Decomp>
  end

  rule sms_declare_decomp_unstructured_option
    t_colon sms_t_unstructured <SMS_Declare_Decomp_Unstructured_Option>
  end

  rule sms_decomp_name
    name "" <SMS_Decomp_Name>
  end

   rule sms_distribute
     sms_distribute_begin declaration_constructs sms_distribute_end <SMS_Distribute>
   end

  rule sms_distribute_begin
    sms_sentinel sms_t_distribute t_paren_l sms_decomp_name t_comma sms_distribute_dims t_paren_r sms_t_begin sms_comment? t_newline &{ |e| sp_sms_distribute_begin(e[3],e[5]) } <SMS_Distribute_Begin>
  end

  rule sms_distribute_dim
    scalar_int_literal_constant
  end

  rule sms_distribute_dims
    sms_distribute_dim t_comma sms_distribute_dim <SMS_Distribute_Dims_1> /
    t_comma sms_distribute_dim <SMS_Distribute_Dims_2> /
    sms_distribute_dim "" <SMS_Distribute_Dims_3>
  end

  rule sms_distribute_end
    sms_sentinel sms_t_distribute sms_t_end sms_comment? t_newline &{ |e| sp_sms_distribute_end } <SMS_Distribute_End>
  end

  rule sms_exchange
    sms_sentinel sms_t_exchange t_paren_l sms_variable_list t_paren_r sms_comment? t_newline &{ |e| sp_sms_exchange } <SMS_Exchange>
  end

  rule sms_exchange_begin
    sms_sentinel sms_t_exchange_begin t_paren_l sms_variable_list t_paren_r sms_comment? t_newline &{ |e| sp_sms_exchange_begin } <SMS_Exchange_Begin>
  end

  rule sms_exchange_end
    sms_sentinel sms_t_exchange_end t_paren_l sms_variable_list t_paren_r sms_comment? t_newline &{ |e| sp_sms_exchange_end } <SMS_Exchange_End>
  end

  rule sms_executable
    sms_barrier /
    sms_comm_rank /
    sms_comm_size /
    sms_compare_var /
    sms_create_decomp /
    sms_exchange /
    sms_exchange_begin /
    sms_exchange_end /
    sms_halo_comp &{ |e| sp_env_pullup(e[0]) } <SMS_Executable_SMS_Halo_Comp> /
    sms_halo_comp_setup /
    sms_get_communicator /
    sms_ignore /
    sms_order_grid /
    sms_parallel &{ |e| sp_env_pullup(e[0]) } <SMS_Executable_SMS_Parallel> /
    sms_reduce /
    sms_serial &{ |e| sp_env_pullup(e[0]) } <SMS_Executable_SMS_Serial> /
    sms_set_communicator /
    sms_set_prox_and_proxs /
    sms_start /
    sms_stop /
    sms_to_local &{ |e| sp_env_pullup(e[0]) } <SMS_Executable_SMS_To_Local> /
    sms_unstructured_print_timers /
    sms_zerotimers
  end

  rule sms_get_communicator
    sms_sentinel sms_t_get_communicator t_paren_l scalar_int_variable t_paren_r sms_comment? t_newline <SMS_Get_Communicator>
  end

  rule sms_halo_comp
    sms_halo_comp_begin block sms_halo_comp_end &{ |e| sp_sms_halo_comp } <SMS_Halo_Comp>
  end

  rule sms_halo_comp_begin
    sms_sentinel sms_t_halo_comp t_paren_l sms_halo_comp_pairs sms_halo_comp_sidevar_option? t_paren_r sms_t_begin sms_comment? t_newline &{ |e| sp_sms_halo_comp_begin(e[3],e[4]) } <SMS_Halo_Comp_Begin>
  end

  rule sms_halo_comp_end
    sms_sentinel sms_t_halo_comp sms_t_end sms_comment? t_newline &{ |e| sp_sms_halo_comp_end } <SMS_Halo_Comp_End>
  end

  rule sms_halo_comp_pair
    t_lt expr t_comma expr t_gt <SMS_Halo_Comp_Pair>
  end

  rule sms_halo_comp_pairs
    sms_halo_comp_pair (t_comma sms_halo_comp_pair)? (t_comma sms_halo_comp_pair)? <SMS_Halo_Comp_Pairs>
  end

  rule sms_halo_comp_setup
    sms_sentinel sms_t_halo_comp_setup t_paren_l sms_decomp_name t_comma variable t_comma variable t_paren_r t_newline <SMS_Halo_Comp_Setup>
  end

  rule sms_halo_comp_sidevar_option
    t_comma variable <SMS_Halo_Comp_Sidevar_Option>
  end

  rule sms_ignore
    sms_ignore_begin block sms_ignore_end &{ |e| sp_sms_ignore } <SMS_Ignore>
  end

  rule sms_ignore_begin
    sms_sentinel sms_t_ignore sms_t_begin sms_comment? t_newline &{ |e| sp_sms_ignore_begin } <SMS_Ignore_Begin>
  end

  rule sms_ignore_end
    sms_sentinel sms_t_ignore sms_t_end sms_comment? t_newline &{ |e| sp_sms_ignore_end } <SMS_Ignore_End>
  end

  rule sms_order_grid
    sms_sentinel sms_t_order_grid t_paren_l variable_name t_comma variable_name t_comma variable_name t_comma variable_name t_comma variable_name t_comma variable_name t_paren_r t_newline &{ |e| sp_sms_order_grid } <SMS_Order_Grid>
  end

  rule sms_parallel
    sms_parallel_begin block sms_parallel_end &{ |e| sp_sms_parallel } <SMS_Parallel>
  end

  rule sms_parallel_begin
    sms_sentinel sms_t_parallel t_paren_l sms_decomp_name t_comma sms_parallel_var_lists t_paren_r sms_t_begin sms_comment? t_newline &{ |e| sp_sms_parallel_begin(e[3],e[5]) } <SMS_Parallel_Begin>
  end

  rule sms_parallel_end
    sms_sentinel sms_t_parallel sms_t_end sms_comment? t_newline &{ |e| sp_sms_parallel_end } <SMS_Parallel_End>
  end

  rule sms_parallel_var_list
    t_lt variable_name ( t_comma variable_name )* t_gt <SMS_Parallel_Var_List_1> /
    variable_name "" <SMS_Parallel_Var_List_2>
  end

  rule sms_parallel_var_lists
    t_comma t_comma sms_parallel_var_list <SMS_Parallel_Var_Lists_001> /
    t_comma sms_parallel_var_list t_comma sms_parallel_var_list <SMS_Parallel_Var_Lists_011> /
    t_comma sms_parallel_var_list <SMS_Parallel_Var_Lists_010> /
    sms_parallel_var_list t_comma sms_parallel_var_list t_comma sms_parallel_var_list <SMS_Parallel_Var_Lists_111> /
    sms_parallel_var_list t_comma t_comma sms_parallel_var_list <SMS_Parallel_Var_Lists_101> /
    sms_parallel_var_list t_comma sms_parallel_var_list <SMS_Parallel_Var_Lists_110> /
    sms_parallel_var_list "" <SMS_Parallel_Var_Lists_100>
  end

  rule sms_reduce
    sms_sentinel sms_t_reduce t_paren_l sms_reduce_varlist t_comma sms_reduce_op t_paren_r sms_comment? t_newline &{ |e| sp_sms_reduce } <SMS_Reduce>
  end

  rule sms_reduce_op
    sms_t_max /
    sms_t_min /
    sms_t_sum
  end

  rule sms_reduce_varlist
    variable ( t_comma variable !t_paren_r )* <SMS_Reduce_Varlist>
  end

  rule sms_sentinel
    "!sms$" <T>
  end

  rule sms_serial
    sms_serial_begin block sms_serial_end &{ |e| sp_sms_serial } <SMS_Serial>
  end

  rule sms_serial_begin
    sms_sentinel sms_t_serial sms_serial_control? sms_t_begin sms_comment? t_newline &{ |e| sp_sms_serial_begin } <SMS_Serial_Begin>
  end

  rule sms_serial_control
    t_paren_l sms_serial_control_option t_paren_r <SMS_Serial_Control>
  end

  rule sms_serial_control_option
    sms_serial_treatment_lists ( t_colon sms_serial_default )? <SMS_Serial_Control_Option_1> /
    sms_serial_default "" <SMS_Serial_Control_Option_2>
  end

  rule sms_serial_default
    sms_t_default t_equal sms_serial_treatment <SMS_Serial_Default>
  end

  rule sms_serial_end
    sms_sentinel sms_t_serial sms_t_end sms_comment? t_newline &{ |e| sp_sms_serial_end } <SMS_Serial_End>
  end

  rule sms_serial_treatment
    sms_t_ignore /
    sms_t_inout /
    sms_t_in /
    sms_t_out
  end

  rule sms_serial_treatment_list
    t_lt sms_serial_varlist t_comma sms_serial_treatment t_gt <SMS_Serial_Treatment_List>
  end

  rule sms_serial_treatment_lists
    sms_serial_treatment_list ( t_comma sms_serial_treatment_list )* <SMS_Serial_Treatment_Lists>
  end

  rule sms_serial_varlist
    variable ( t_comma variable !t_gt )* <SMS_Serial_Varlist>
  end

  rule sms_set_communicator
    sms_sentinel sms_t_set_communicator t_paren_l variable_name t_paren_r sms_comment? t_newline &{ |e| sp_sms_set_communicator } <SMS_Set_Communicator>
  end

  rule sms_set_prox_and_proxs
    sms_sentinel sms_t_set_prox_and_proxs t_paren_l sms_decomp_name t_comma variable_name t_comma variable_name t_comma variable_name t_comma variable_name t_comma variable_name t_comma variable_name t_paren_r t_newline &{ |e| sp_sms_set_prox_and_proxs } <SMS_Set_Prox_And_Proxs>
  end

  rule sms_start
    sms_sentinel sms_t_start sms_comment? t_newline &{ |e| sp_sms_start } <SMS_Start>
  end

  rule sms_stop
    sms_sentinel sms_t_stop sms_stop_option? sms_comment? t_newline &{ |e| sp_sms_stop } <SMS_Stop>
  end

  rule sms_stop_option
    t_paren_l variable_name t_paren_r <SMS_Stop_Option>
  end

  rule sms_string
    char_literal_constant_dq /
    char_literal_constant_sq
  end

  rule sms_t_barrier
    "barrier" <T>
  end

  rule sms_t_begin
    "begin" <T>
  end

  rule sms_t_comm_rank
    "comm_rank" <T>
  end

  rule sms_t_comm_size
    "comm_size" <T>
  end

  rule sms_t_compare_var
    "compare_var" <T>
  end

  rule sms_t_create_decomp
    "create_decomp" <T>
  end

  rule sms_t_declare_decomp
    "declare_decomp" <T>
  end

  rule sms_t_default
    "default" <T>
  end

  rule sms_t_distribute
    "distribute" <T>
  end

  rule sms_t_end
    "end" <T>
  end

  rule sms_t_exchange
    "exchange" <T>
  end

  rule sms_t_exchange_begin
    "exchange_begin" <T>
  end

  rule sms_t_exchange_end
    "exchange_end" <T>
  end

  rule sms_t_get_communicator
    "get_communicator" <T>
  end

  rule sms_t_halo_comp
    "halo_comp" <T>
  end

  rule sms_t_halo_comp_setup
    "halo_comp_setup" <T>
  end

  rule sms_t_ignore
    "ignore" <T>
  end

  rule sms_t_in
    "in" <T>
  end

  rule sms_t_inout
    "inout" <T>
  end

  rule sms_t_lbound
    "lbound" <T>
  end

  rule sms_t_max
    "max" <T>
  end

  rule sms_t_min
    "min" <T>
  end

  rule sms_t_order_grid
    "order_grid" <T>
  end

  rule sms_t_out
    "out" <T>
  end

  rule sms_t_parallel
    "parallel" <T>
  end

  rule sms_t_reduce
    "reduce" <T>
  end

  rule sms_t_regionsize
    "regionsize" <T>
  end

  rule sms_t_serial
    "serial" <T>
  end

  rule sms_t_set_communicator
    "set_communicator" <T>
  end

  rule sms_t_set_prox_and_proxs
    "set_prox_and_proxs" <T>
  end

  rule sms_t_start
    "start" <T>
  end

  rule sms_t_stop
    "stop" <T>
  end

  rule sms_t_sum
    "sum" <T>
  end

  rule sms_t_to_local
    "to_local" <T>
  end

  rule sms_t_ubound
    "ubound" <T>
  end

  rule sms_t_unstructured
    "unstructured" <T>
  end

  rule sms_t_unstructured_grid
    "unstructured_grid" <T>
  end

  rule sms_t_unstructured_print_timers
    "unstructured_print_timers" <T>
  end

  rule sms_t_zerotimers
    "zerotimers" <T>
  end

  rule sms_to_local
    sms_to_local_begin block sms_to_local_end &{ |e| sp_sms_to_local } <SMS_To_Local>
  end

  rule sms_to_local_begin
    sms_sentinel sms_t_to_local t_paren_l sms_decomp_name t_colon sms_to_local_lists t_paren_r sms_t_begin sms_comment? t_newline &{ |e| sp_sms_to_local_begin(e[3],e[5]) } <SMS_To_Local_Begin>
  end

  rule sms_to_local_end
    sms_sentinel sms_t_to_local sms_t_end sms_comment? t_newline &{ |e| sp_sms_to_local_end } <SMS_To_Local_End>
  end

  rule sms_to_local_key
    sms_t_lbound /
    sms_t_ubound
  end

  rule sms_to_local_list
    t_lt sms_distribute_dim t_comma sms_variable_name_list t_colon sms_to_local_key t_gt <SMS_To_Local_List>
  end

  rule sms_to_local_lists
    sms_to_local_list ( t_comma sms_to_local_list ( t_comma sms_to_local_list )? )? <SMS_To_Local_Lists>
  end

  rule sms_unstructured_print_timers
    sms_sentinel sms_t_unstructured_print_timers sms_comment? t_newline &{ |e| sp_sms_unstructured_print_timers } <SMS_Unstructured_Print_Timers>
  end

  rule sms_varlist3d
    variable t_comma variable t_comma variable <SMS_Varlist3D_1> /
    t_comma variable t_comma variable <SMS_Varlist3D_2> /
    t_comma t_comma variable <SMS_Varlist3D_3> /
    variable t_comma variable <SMS_Varlist3D_4> /
    t_comma variable <SMS_Varlist3D_5> /
    variable "" <SMS_Varlist3D_6>
  end

  rule sms_variable_list
    variable ( t_comma variable )* <SMS_Variable_List>
  end

  rule sms_variable_name_list
    variable_name ( t_comma variable_name )* <SMS_Variable_Name_List>
  end

  rule sms_zerotimers
    sms_sentinel sms_t_zerotimers sms_comment? t_newline &{ |e| sp_sms_zerotimers } <SMS_Zerotimers>
  end

end
