
- REMOVE sms_passthrough and everything related to it.

- REMOVE sms$ignore* and everything related to it.

- Need tests of F90:R1206 generic_spec (2nd two forms).

- Need tests of all R905 possibilities.

- Need tests of all F90:R912 possibilities.

- Need tests of all F90:R924 possibilities.

- In declare(), may need to pass in attr options (e.g. dimension, access)

- Move proc_sms_executable call from sms_executable : sms_barrier to
  executable_construct : sms_executable once sms$ignore begin/end are gone.
  Also: sms_compare_var.

- Move proc_sms_declarative call from sms_declarative : sms_distribute to
  declaration_construct : sms_declarative once sms$ignore begin/end are gone.

- In declare(), use push(tree) instead of insert(0,tree) to insert new
  declarations at the END of the declarations list. Unfortunately, the old
  ppp breaks (fim:cnuity.F90) with the declaration at the end -- can't see
  the break between declaration and execution.

- When the legacy ppp is removed from the build chain, remove the sms$ignore
  region being inserted by use(), which is only an interim shim to keep legacy
  ppp from freaking out.

- declare() is naive. What about declaring an array with the same type as an
  already-declared scalar? Need more flexibility...

- Error needed when compare_var variable is not distributed or no mod info

- Remove HACK from SMS_Compare_Var::translate() when modules are being loaded
  into env. No sense in looking up env information for use'd variables.

- WHERE may need (automatic?) parallel treatment.

- Are distributed array assignments e.g.
    !sms$distribute (dh,1) begin
    integer::a(100)
    !sms$distribute end
    a=0
  supported?

- Need to check for erroneous placement of executable sms construct in
  declaration section, and vice versa, as compiler will not help with
  this. Maybe this is already being done via grammar.

- Stop tracking kind. Pass only *type* to MPI-calling SMS routines and, in the
  latter, use mpi_sizeof() + mpi_type_match_size() in the library to make a
  run-time determination of MPI type to use. Get rid of related kind() methods
  in fortran.rb.

- Check for and clean up any unused rules (especially sms_* rules)

- It might be better to prefix in-class method calls with 'self.' for clarity.

