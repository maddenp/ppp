### ENVIRONMENT

- Derived types provided by modules should appear in envfiles. Update: A start
  has been made here, in that derived-type names are now registered in the
  environment with {"sort"=>"type"}. The type's contents need to be added.

### ERROR CHECKING / REPORTING

### GRAMMAR

### NEW FEATURES

### NORMALIZATION

+ Replace ad-hoc normalizer with (maybe) Ragel-based transformer. Should handle
  holleriths, too. Changes made to text coordinates during processing by the
  state machine should be recorded so that coordinates related to errors during
  parsing can be mapped to original-source coordinates. Note that prepsrc_free
  and prepsrc_fixed changes need to be incorporated into this somehow.

### OPTIMIZATION

- Can serial-region parse optimization be used elsewhere? Marshal::[load/dump]?
  (This optimization consists of reusing the already-parsed subtree, prepending
  or appending statements for pre/post actions as needed, instead of making a
  string from the subtree, tacking on pre/post text, and reparsing.)

### PARSING

- Reconsider storing references to tree nodes during parsing. Instead, consider
  replacing 'adopt' walk with a general data-collection walk, after initial
  parse. Some data collection during parsing will still be necessary for correct
  parsing, but move anything related to collecting information for translation
  to the data-collection walk. Also get rid of env[:global][:parsed].

- In grammar class methods that return an optional element (execution_part() of
  Main_Program e.g.) check *there* for expected class vs SyntaxNode and return
  nil for the latter (i.e. the optional element is not present). This factors
  the knowledge about the grammar into the appropriate class. (Hint: Search for
  'is_a?' and find logic checking for certain tree-node classes.)

- Intel compiler directives need independent grammar rules, with scoping to
  decl, exe, other sections.

### REFACTORING

- Implement register/exchange scheme. (Update 2015-01-08: This may not be
  needed once ongoing work on halo pack/unpack work is finished, as that
  may already require creating independent exchange calls.)

- In e.g. SMS_Exchange, rename maxrank -> ppp_max_rank and sms_maxvars ->
  ppp_max_exchange_vars, first renaming the ppp_* vars in the SMS library to
  adhere to sms__ naming convention. 7 as the max fortran rank would be
  reasonable to keep in ppp, but the max vars bit (may occur, with a different
  name, in other directives) should be a reference into the library code.

### TRANSLATION

- All dh__* vars to sms__dh_*, for uniformity.

- Deal with structured grids.

- Deal with derived types. Start e.g. with treating them in serial regions.

- Perform sms$parallel translation implicitly?

- sms$halo_comp -> one-line directive bound to parallel do loop?

### TREE

- To make all of this more useful, build an AST from the parse tree. Then, do
  translations on and produce final output from the AST.
