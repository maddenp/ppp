-  IN PROGRESS (MH) Work on testing ppp with FIM source code to find any potential
  errors

-  DONE (MH) In translator.rb, think about 'opts' and what is actually optional. Move
  requirements into the mandatory argslist.

-  DONE (MH) Replace opts Hash with an OpenStruct?

-  DONE (MH) Need some kind of fixed-point treatment of assemble / include /
  sms$insert?

- directives still to do

  !sms$serial begin/end
  directiveless io translations (print, write, stop, namelist stuff, ???)
  !sms$ignore begin/end

- Remove various HACKS and deal with any fallout.

- In declare(), use push(tree) instead of insert(0,tree) to insert new
  declarations at the END of the declarations list. Unfortunately, the old
  ppp breaks (fim:cnuity.F90) with the declaration at the end -- can't see
  the break between declaration and execution.

- When the legacy ppp is removed from the build chain, remove the sms$ignore
  region being inserted by use(), which is only an interim shim to keep legacy
  ppp from freaking out.

- declare() is naive. What about declaring an array with the same type as an
  already-declared scalar? Need more flexibility...

- Error needed when compare_var variable is not distributed or no mod info

- WHERE may need (automatic?) parallel treatment.

- Are distributed array assignments e.g.
    !sms$distribute (dh,1) begin
    integer::a(100)
    !sms$distribute end
    a=0
  supported?

- Stop tracking kind. Pass only *type* to MPI-calling SMS routines and, in the
  latter, use mpi_sizeof() + mpi_type_match_size() in the library to make a
  run-time determination of MPI type to use. Get rid of related kind() methods
  in fortran.rb. IS THIS A GOOD IDEA?

- Check for and clean up any unused rules (especially sms_* rules)

- It might be better to prefix all in-class method calls with 'self.' for
  clarity.

- Why does sms$parallel require positional variable lists, while sms$to_local
  requires numbered lists? This should be harmonized. The latter is better.

- rule variable is broken: See parse tree for program 'i=1\nend'. 'i' is parsed
  as data_ref. It seems that some mechanism to differentiate between user-
  defined and intrinsic types is needed. Also, probably user-defined type
  information  needs to be in the environment, written to .sms mod files, etc.

- Structure constructor recognition is broken, is parsed as function reference.
  See t0151. May also be related to need to track, store, load user-defined type
  info.

- Make implicit none mandatory! Parsing is weird w/o it. Update: Not sure if
  this is feasible if we want to use others' libraries -- may be too much work
  to modify old code using implicit typing.

- write-stmt seems to parse wrong, 'write' recognized as Data_Ref. This could be
  a problem re: implicit translation of write io statements.

- translate() on SMS_Unstructured_Grid cannot possibly be correct in the general
  case, right?

- Sort envfile output for easy xxdiff comparison.

- Does the envfile from a module that uses another module contain the info from
  the other module? Should it?

- When sms$ignore is gone, reconsider places where 'rule directive' can apply in
  non-SMS grammar. Currently, to allow for a Fortran-only parser that still
  accepts SMS directives that appear in 'weird' places (like sms$ignore
  directives that appear outside any declarative or executable context),
  'directive' appears in rule positions where it should not eventually be
  necessary.

- After replacing an element or statement, walk up tree replacing text_value
  with new version while ancestor text_value = *old* replaced node's text_value?

- Better vertical whitespace in output (e.g. before & after functions and sub-
  routines -- maybe all blocks?)

- IIRC, parsing of allocate_object is broken, in that the variable_name option
  (2nd choice) will never be chosen because structure_component always matches.
  Need some more sophisticated logic...

- Should derived types provided by modules appear in .env files (probably!), and
  how?

- Fortran#replace_statements (plural) may be problematic (i.e. it might modify
  the tree in unsound ways). It may be better to use the block_do_construct
  trick (do\n...exit\nend do", replacing a single statement.

- Fortran#declare needs to insert new declarations at the *bottom* of the decl
  section, not at the top, so that declare() calls can be made, intuitively, in
  the required order.

- .env file does not contain items added during translation, (true?) e.g.
  module_decomp.env does not even *exist*, much less contain the items added
  during translation.

- To make all of this more useful, build an AST from the parse tree. Then, do
  translations on and produce final output from the AST.

- Reformulate distribute begin/end as distribute region.

- In SMS_Create_Decomp#translate, merge multiple 1..3 loops. They are as they
  are now to aid in textual comparison to legacy ppp.

- SMS_Create_Decomp#translate is only valid for one decomposed dimension. Extend
  it to handle three.

- Do we need block sms$reduce?

- Define new API, document, bring translator up-to-spec.

- Use ppp__status in calls into sms library to abort on error.

- Can we replace env with OpenStruct? What does that look like serialized to
  YAML? Is it human readable/writeable?

- In SMS_Reduce#translate, build out case statement for the other supported
  nnt_* types.

- Make nnt_/ppp_/sms_ namespace consistent. Ensure that any rolled-out names
  adhere to whatever standard is chosen.

- In fortran.rb/sms_fortran.rb, standardize when methods on nodes return strings
  or SyntaxNode subclasses. That is, should we convert to strings as early as
  possible, or delay until a string is absolutely required? Probably the latter.

- Try to find out which directives actually require module_decomp and/or
  nnt_types_module and limit rolled-out 'declare' calls.

- sms$serial ought to give diagnostic information about which variables it will
  gather, scatter or broadcast, so that users can tune the directive.

- sms$serial should complain about in/out/inout intent of variables that never
  occur in the region. Or should we force bcast/gather/scatter of these?

- sms$serial should complain about mismatches, e.g. explicitly specifying a
  variable as both 'in' and 'ignore'.

- In SMS_Serial#translate, there's a potential issue in that a Name may be
  e.g. a function or subroutine name, in which case it may not (will not?)
  appear in the environment. For now, ignore the Name if it's not in the
  environment, which prevents translation of non-variable names. Note that
  'standard' behavior is to exit with an error if an expected name is not found,
  so this is divergent. Worse, it may be *wrong* as function names may
  eventually appear in the environment (to note their type).

- Should T#declare in fortran.rb exist? Should it abort if called?

- translate_children() -- do we need 'if e' & compact & 'if x'?

- In fail tests for improperly nested regions, use SMS$DIRECTIVE names instead
  of generic descriptions.

- Consider which sms_ignore_* rules are actually needed. Certainly _executable,
  but possibly not _declarative, _use or _implicit. Get rid of what isn't
  necessary.

- Any error output from parsing must go to stderr, not stdout, so that output
  file containing error info instead of code isn't created. Otherwise, make
  may fail to properly build, since a lately-timestamped output file will
  exist. (Already done for PARSE FAILED.)

- Check status on all allocates rolled out by ppp.

- In getvarenv(), give more verbose information about why a failure has occurred
  and what to do about it (e.g. .env file is not available, so get dependencies
  right, or write your own .env file, only ask ppp to operate on appropriate
  variables, etc.)

- Factor array-literal creation for sms_compare_var, esms_exhcange, sms_serial,
  etc.

- Add no-translate option to ppp so that .env files are generated w/o changing
  the source at all. JUST REDIRECT OUTPUT TO /dev/null OR SIMILAR?

- Need SMS library function that takes type and kind arguemnts and returns the
  correct nnt_ type to use in library calls.

- Trim rolled-out variable names to 31 characters (F90 section 3.2.2) Or use
  some numeric scheme in too-long cases, to avoid collisions.

- Consider limitation on number of continuation lines. At least exit with error
  if this is happening.

- In fortran.rb's dolabel_repeat?(), consider not just the most recently pushed
  label, but also labels further down in the stack? That would also be an error,
  right?

- In fortran.tt, rule array_spec makes a claim about a bad parse. The comment
  should include a case to demonstrate this, so that the comment can be removed
  if/when the parse problem is corrected.

- In normalizer.tt, should Quoted have higher precendence? Otherwise, what about
  '@' inside a quoted string?

- Normalizing parses can fail, too. Handle it.
